title: Definition&#58; Software Craftsman
slug: definition_software_craftsman
author: Mark Nijhof
published: false

There is a lot of disagreement or at-least confusion going on about what Software Craftsmanship means and whether we are using the right terms and philosophy. Now considering that I use the term Software Craftsmanship quite a often myself I thought that it might be useful if I provided **my definition** of a Software Craftsman and what **it means to me to be one**.

##My definition of: Software Craftsman##

Software Craftsman: a person who is working in the software industry and his main concern/responsibility is to deliver the highest possible value to his stakeholders. 

###value###

Value: ["Worth in usefulness or importance to the possessor; utility or merit"](http://www.thefreedictionary.com/value) where the possessor is your stakeholder, not you!

The stakeholder will primarily look at the provided functionality and that it solves his problems in the way he expects it, code quality is almost never a direct concern. This is because this concern is covered by the requirement that the software needs to be easily maintainable and extendable. 

These last two requirements are easier met in higher quality software then they are in lower quality software.

So creating high quality software is driven by the mandate to deliver value in the form of maintainability and extendability; because the software craftsman knows that requirements will change over-time and that these changes are easier to implement in higher quality software. Also in the longer run it is much faster to build software that has a solid foundation, but that is pretty much the extendability part.

But the stakeholder may decide that in-order to deliver something super fast he will drop the maintainability and extendability requirement. My expectation is that at that time the software craftsman would still not go all crazy hackery, but that he would take certain shortcuts. Important to note here is that I believe that the potential gain in time is only possible when the original requirements where not to complex to begin with. When dealing with complex requirements a better way to gain speed is to reduce/simplify the requirements.

In the end this should not be the software craftsman's decision but that of the stakeholder, it is the software craftsman's responsibility to properly inform the stakeholder.

Finally, it is very satisfying and rewarding to deliver something someone else wants and is really happy with. So value is the main driver for building software.

####Improvement####

The continuous thrive for learning and improving is directly related to delivering value, because in-order to deliver high quality software the software craftsman needs to know what options there are to choose from. How can he choose the best solution if he only has one solution to pick from? Of-course you never really know if what you did was the best solution, but your chances on getting it right increase a lot when you have different options to choose from. Of-source most software craftsman I know also enjoy the hell out of learning new stuff and improving themselves.

####Sharing####

Sharing knowledge is also a direct result from the above statements; by improving those around you, you improve the team as a whole, enabling you to make better decisions and produce higher quality. And this will result in more value. 


##Definition##

In the end I don't care about the word, I care about the definition of it. It is not important how you call yourself, what you do is what is important.

##Disclaimer##

The use of the words "man", "he" and "his" are illustrative only, the word "craftsman" is gender agnostic and is used to describe both man and woman



**Value**<br />
Value overtime is often easier to achieve and maintain by delivering higher quality deliverables. Sometimes however there is more value in delivering something really fast than there is in delivering something that is easy to maintain and extend. The stakeholder decides.







###Delivers value###

###Continuously improves###

###Shares knowledge###
Sharing knowledge is also a direct result from the above statements; by improving those around you, you improve the team as a whole, enabling you to make better decisions and produce higher quality. And this will result in more value. 

###Delivers value###
A Software Craftsman also knows that in-order to deliver value _now_ he may have to reduce the quality. But he knows and will explain the consequences to the team and stakeholders, as in the end the **stakeholders decide where the real value lies**. <i>This may be more often then I realize, I am still learning.</i>

##And##
It is more fun this way, at-least for me it is: What is more fun than delivering something that someone else really needs and makes them happy? Well perhaps teaching someone something new may actually deliver more satisfaction. And too me learning new things and practicing them is pure fun. 



